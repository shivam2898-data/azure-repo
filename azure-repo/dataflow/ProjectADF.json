{
	"name": "ProjectADF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "RedBus",
						"type": "DatasetReference"
					},
					"name": "RedBus"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ProjectADFSynapse",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ProjectADFSynapse",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "ProjectADFSynapse",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "ProjectADFSynapse",
						"type": "DatasetReference"
					},
					"name": "sink4"
				},
				{
					"dataset": {
						"referenceName": "ProjectADFSynapse",
						"type": "DatasetReference"
					},
					"name": "sink5",
					"rejectedDataLinkedService": {
						"referenceName": "projectBlobStorage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "DimRoute"
				},
				{
					"name": "Route"
				},
				{
					"name": "DimBus"
				},
				{
					"name": "Bus"
				},
				{
					"name": "DimPassenger"
				},
				{
					"name": "Passenger"
				},
				{
					"name": "DimPayment"
				},
				{
					"name": "Payment"
				},
				{
					"name": "union1"
				},
				{
					"name": "FactBooking"
				},
				{
					"name": "Booking"
				},
				{
					"name": "filter1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "filter3"
				},
				{
					"name": "filter4"
				},
				{
					"name": "filter5"
				}
			],
			"scriptLines": [
				"source(output(",
				"          First_Name as string,",
				"          Last_Name as string,",
				"          Age as string,",
				"          City_From as string,",
				"          {City To} as string,",
				"          Bus_Type as string,",
				"          Seat_Type as string,",
				"          Booking_Type as string,",
				"          Payment_Method as string,",
				"          Ticket_Fare as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RedBus",
				"RedBus keyGenerate(output(RouteID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> DimRoute",
				"DimRoute select(mapColumn(",
				"          City_From,",
				"          Ticket_Fare,",
				"          RouteID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Route",
				"RedBus keyGenerate(output(BusID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> DimBus",
				"DimBus select(mapColumn(",
				"          Bus_Type,",
				"          Seat_Type,",
				"          BusID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Bus",
				"RedBus keyGenerate(output(PassengerID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> DimPassenger",
				"DimPassenger select(mapColumn(",
				"          First_Name,",
				"          Last_Name,",
				"          Age,",
				"          PassengerID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Passenger",
				"RedBus keyGenerate(output(PaymentID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> DimPayment",
				"DimPayment select(mapColumn(",
				"          Payment_Method,",
				"          Ticket_Fare,",
				"          PaymentID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Payment",
				"Route, Payment, Bus, Passenger union(byName: true)~> union1",
				"union1 select(mapColumn(",
				"          RouteID,",
				"          PaymentID,",
				"          BusID,",
				"          PassengerID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FactBooking",
				"FactBooking keyGenerate(output(BookingID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> Booking",
				"Payment filter(!isNull(Payment_Method) && !isNull(Ticket_Fare) && !isNull(PaymentID)",
				") ~> filter1",
				"Passenger filter(!isNull(First_Name) && !isNull(Last_Name) && !isNull(Age)&& !isNull(PassengerID)) ~> filter2",
				"Bus filter(!isNull(Bus_Type) && !isNull(Seat_Type) && !isNull(BusID)) ~> filter3",
				"Booking filter(!isNull(RouteID) && !isNull(PaymentID) && !isNull(BusID)&& !isNull(PassengerID)&&!isNull(BookingID)) ~> filter4",
				"Route filter(!isNull(City_From) && !isNull(Ticket_Fare) && !isNull(RouteID)",
				") ~> filter5",
				"filter5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RouteID as integer,",
				"          City_From as string,",
				"          City_To as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RouteID as integer,",
				"          City_From as string,",
				"          City_To as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2",
				"filter3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RouteID as integer,",
				"          City_From as string,",
				"          City_To as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink3",
				"filter2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RouteID as integer,",
				"          City_From as string,",
				"          City_To as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink4",
				"filter4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RouteID as integer,",
				"          City_From as string,",
				"          City_To as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink5"
			]
		}
	}
}