{
	"name": "ProjectADFRedBus",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ProjectRedBus",
						"type": "DatasetReference"
					},
					"name": "RedBus"
				},
				{
					"dataset": {
						"referenceName": "RedBusFactTable",
						"type": "DatasetReference"
					},
					"name": "RedBusFact"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ProjectADFSynapse",
						"type": "DatasetReference"
					},
					"name": "sinkPassenger"
				},
				{
					"dataset": {
						"referenceName": "ProjectADFSynapse",
						"type": "DatasetReference"
					},
					"name": "sinkRoute"
				},
				{
					"dataset": {
						"referenceName": "ProjectADFSynapse",
						"type": "DatasetReference"
					},
					"name": "sinkBus"
				},
				{
					"dataset": {
						"referenceName": "ProjectADFSynapse",
						"type": "DatasetReference"
					},
					"name": "sinkPayment"
				}
			],
			"transformations": [
				{
					"name": "DimPassenger"
				},
				{
					"name": "aggregatePassenger"
				},
				{
					"name": "filterPassenger"
				},
				{
					"name": "surrogateKeyPassenger"
				},
				{
					"name": "selectPassenger"
				},
				{
					"name": "DimRoute"
				},
				{
					"name": "filterRoute"
				},
				{
					"name": "aggregateRoute"
				},
				{
					"name": "surrogateKeyRoute"
				},
				{
					"name": "selectRoute"
				},
				{
					"name": "DimBus"
				},
				{
					"name": "filterBus"
				},
				{
					"name": "aggregateBus"
				},
				{
					"name": "surrogateKeyBus"
				},
				{
					"name": "selectBus"
				},
				{
					"name": "DimPayment"
				},
				{
					"name": "filterPayment"
				},
				{
					"name": "aggregatePayment"
				},
				{
					"name": "surrogateKeyPayment"
				},
				{
					"name": "selectPayment"
				},
				{
					"name": "lookupDimPayment"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          First_Name as string,",
				"          Last_Name as string,",
				"          Age as string,",
				"          City_From as string,",
				"          City_To as string,",
				"          Bus_Type as string,",
				"          Seat_Type as string,",
				"          Booking_Type as string,",
				"          Payment_Method as string,",
				"          Ticket_Fare as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RedBus",
				"source(output(",
				"          First_Name as string,",
				"          Last_Name as string,",
				"          Age as string,",
				"          City_From as string,",
				"          City_To as string,",
				"          Bus_Type as string,",
				"          Seat_Type as string,",
				"          Booking_Type as string,",
				"          Payment_Method as string,",
				"          Ticket_Fare as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RedBusFact",
				"RedBus select(mapColumn(",
				"          First_Name,",
				"          Last_Name,",
				"          Age",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DimPassenger",
				"filterPassenger aggregate(groupBy(First_Name,",
				"          Last_Name,",
				"          Age),",
				"     First_Name_C = count(First_Name)) ~> aggregatePassenger",
				"DimPassenger filter(!isNull(First_Name) &&",
				"!isNull(Last_Name) &&",
				"!isNull(Age)) ~> filterPassenger",
				"aggregatePassenger keyGenerate(output(PassengerID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKeyPassenger",
				"surrogateKeyPassenger select(mapColumn(",
				"          First_Name,",
				"          Last_Name,",
				"          Age,",
				"          PassengerID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectPassenger",
				"RedBus select(mapColumn(",
				"          City_From,",
				"          City_To",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DimRoute",
				"DimRoute filter(!isNull(City_From) && !isNull(City_To)) ~> filterRoute",
				"filterRoute aggregate(groupBy(City_From,",
				"          City_To),",
				"     City_From_C = count(City_From)) ~> aggregateRoute",
				"aggregateRoute keyGenerate(output(RouteID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKeyRoute",
				"surrogateKeyRoute select(mapColumn(",
				"          City_From,",
				"          City_To,",
				"          RouteID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRoute",
				"RedBus select(mapColumn(",
				"          Bus_Type,",
				"          Seat_Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DimBus",
				"DimBus filter(!isNull(Bus_Type) && !isNull(Seat_Type)) ~> filterBus",
				"filterBus aggregate(groupBy(Bus_Type,",
				"          Seat_Type),",
				"     Bus_Type_C = count(Bus_Type)) ~> aggregateBus",
				"aggregateBus keyGenerate(output(BusID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKeyBus",
				"surrogateKeyBus select(mapColumn(",
				"          Bus_Type,",
				"          Seat_Type,",
				"          BusID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectBus",
				"RedBus select(mapColumn(",
				"          Booking_Type,",
				"          Payment_Method,",
				"          Ticket_Fare",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DimPayment",
				"DimPayment filter(!isNull(Booking_Type) && !isNull(Payment_Method)  && !isNull(Ticket_Fare)) ~> filterPayment",
				"filterPayment aggregate(groupBy(Booking_Type,",
				"          Payment_Method,",
				"          Ticket_Fare),",
				"     Booking_Type_C = count(Booking_Type)) ~> aggregatePayment",
				"aggregatePayment keyGenerate(output(PaymentID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKeyPayment",
				"surrogateKeyPayment select(mapColumn(",
				"          Booking_Type,",
				"          Payment_Method,",
				"          Ticket_Fare,",
				"          PaymentID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectPayment",
				"RedBusFact, selectPayment lookup(RedBusFact@Booking_Type == selectPayment@Booking_Type",
				"     && RedBusFact@Payment_Method == selectPayment@Payment_Method",
				"     && RedBusFact@Ticket_Fare == selectPayment@Ticket_Fare,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupDimPayment",
				"lookupDimPayment derive(PaymentID = abs(PaymentID)) ~> derivedColumn1",
				"selectPassenger sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RouteID as integer,",
				"          City_From as string,",
				"          City_To as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkPassenger",
				"selectRoute sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RouteID as integer,",
				"          City_From as string,",
				"          City_To as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkRoute",
				"selectBus sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RouteID as integer,",
				"          City_From as string,",
				"          City_To as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkBus",
				"selectPayment sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RouteID as integer,",
				"          City_From as string,",
				"          City_To as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkPayment"
			]
		}
	}
}