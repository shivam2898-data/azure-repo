{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "RegexADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/csv_toParquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "01_storage_csv_parquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "storage_CSv_parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "01stoageCsvParquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-23T05:10:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_toSynapse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_31n",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "resource-container//"
							},
							{
								"name": "Destination",
								"value": "dbo.rating_ADF"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "userId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "userid",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "movieId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movieid",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "rating",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "timestamp",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_31n",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_31n",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-23T04:57:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquetToSynapseTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "parquetData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "userId",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "userid",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "movieId",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "movieid",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "rating",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "rating",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "timestamp",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-23T09:15:18Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "csvParquetChain",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "userId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "userId",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "movieId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movieId",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "rating",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet4",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "chain2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "csvParquetChain",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "userId",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "userid",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "movieId",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "movieid",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "rating",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "rating",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "timestamp",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet4",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsTable4",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-23T09:31:29Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DestinationDataset_31n",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsTable8",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-28T10:43:24Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/project_azure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "redbus",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "First_Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "First_Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Last_Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Last_Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Age",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Age",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "City_From",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City_From",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "City To",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City To",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Bus_Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Bus_Type",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Seat_Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Seat_Type",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Payment_Method",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Payment_Method",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Ticket_Fare",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Ticket_Fare",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "redbusfile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsTable9",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Newdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SqlTableOrderDetail",
								"type": "DatasetReference"
							},
							"name": "sourceOrderDetail"
						},
						{
							"dataset": {
								"referenceName": "SqlTableOrderHeader",
								"type": "DatasetReference"
							},
							"name": "sourceOrderHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SynapseAnalyticsSink",
								"type": "DatasetReference"
							},
							"name": "sinkDestination"
						}
					],
					"transformations": [
						{
							"name": "joinOrderDetailHeader"
						},
						{
							"name": "selectColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceOrderDetail",
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceOrderHeader",
						"sourceOrderDetail, sourceOrderHeader join(sourceOrderDetail@SalesOrderID == sourceOrderHeader@SalesOrderID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOrderDetailHeader",
						"joinOrderDetailHeader select(mapColumn(",
						"          SalesOrderID = sourceOrderDetail@SalesOrderID,",
						"          SalesOrderDetailID,",
						"          OrderQty,",
						"          RevisionNumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectColumns",
						"selectColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkDestination"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProjectADF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RedBus",
								"type": "DatasetReference"
							},
							"name": "RedBus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ProjectADFSynapse",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ProjectADFSynapse",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "ProjectADFSynapse",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "ProjectADFSynapse",
								"type": "DatasetReference"
							},
							"name": "sink4"
						},
						{
							"dataset": {
								"referenceName": "ProjectADFSynapse",
								"type": "DatasetReference"
							},
							"name": "sink5",
							"rejectedDataLinkedService": {
								"referenceName": "projectBlobStorage",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "DimRoute"
						},
						{
							"name": "Route"
						},
						{
							"name": "DimBus"
						},
						{
							"name": "Bus"
						},
						{
							"name": "DimPassenger"
						},
						{
							"name": "Passenger"
						},
						{
							"name": "DimPayment"
						},
						{
							"name": "Payment"
						},
						{
							"name": "union1"
						},
						{
							"name": "FactBooking"
						},
						{
							"name": "Booking"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "filter4"
						},
						{
							"name": "filter5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          First_Name as string,",
						"          Last_Name as string,",
						"          Age as string,",
						"          City_From as string,",
						"          {City To} as string,",
						"          Bus_Type as string,",
						"          Seat_Type as string,",
						"          Booking_Type as string,",
						"          Payment_Method as string,",
						"          Ticket_Fare as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> RedBus",
						"RedBus keyGenerate(output(RouteID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> DimRoute",
						"DimRoute select(mapColumn(",
						"          City_From,",
						"          Ticket_Fare,",
						"          RouteID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Route",
						"RedBus keyGenerate(output(BusID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> DimBus",
						"DimBus select(mapColumn(",
						"          Bus_Type,",
						"          Seat_Type,",
						"          BusID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Bus",
						"RedBus keyGenerate(output(PassengerID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> DimPassenger",
						"DimPassenger select(mapColumn(",
						"          First_Name,",
						"          Last_Name,",
						"          Age,",
						"          PassengerID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Passenger",
						"RedBus keyGenerate(output(PaymentID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> DimPayment",
						"DimPayment select(mapColumn(",
						"          Payment_Method,",
						"          Ticket_Fare,",
						"          PaymentID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Payment",
						"Route, Payment, Bus, Passenger union(byName: true)~> union1",
						"union1 select(mapColumn(",
						"          RouteID,",
						"          PaymentID,",
						"          BusID,",
						"          PassengerID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FactBooking",
						"FactBooking keyGenerate(output(BookingID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> Booking",
						"Payment filter(!isNull(Payment_Method) && !isNull(Ticket_Fare) && !isNull(PaymentID)) ~> filter1",
						"Passenger filter(!isNull(First_Name) && !isNull(Last_Name) && !isNull(Age)&& !isNull(PassengerID)) ~> filter2",
						"Bus filter(!isNull(Bus_Type) && !isNull(Seat_Type) && !isNull(BusID)) ~> filter3",
						"Booking filter(!isNull(RouteID) && !isNull(PaymentID) && !isNull(BusID)&& !isNull(PassengerID)&&!isNull(BookingID)) ~> filter4",
						"Route filter(!isNull(City_From) && !isNull(Ticket_Fare) && !isNull(RouteID)) ~> filter5",
						"filter5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          RouteID as integer,",
						"          City_From as string,",
						"          City_To as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          RouteID as integer,",
						"          City_From as string,",
						"          City_To as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2",
						"filter3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          RouteID as integer,",
						"          City_From as string,",
						"          City_To as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink3",
						"filter2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          RouteID as integer,",
						"          City_From as string,",
						"          City_To as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink4",
						"filter4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          RouteID as integer,",
						"          City_From as string,",
						"          City_To as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink5"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable4",
								"type": "DatasetReference"
							},
							"name": "sqlDB"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable5",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable6",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "storageADF",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sqlDB",
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"sqlDB, source1 join(sqlDB@SalesOrderID == source1@SalesOrderID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          SalesOrderID = sqlDB@SalesOrderID,",
						"          SalesOrderDetailID,",
						"          OrderQty,",
						"          RevisionNumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProjectPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ProjectDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ProjectADF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RedBus": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {},
									"sink5": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "projectBlobStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "project-container"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ProjectADF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sqlDB": {},
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "storageADF",
									"type": "LinkedServiceReference"
								},
								"folderPath": "resource-container"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.sql_db"
							},
							{
								"name": "Destination",
								"value": "dbo.sql_db"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SalesOrderID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SalesOrderID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "RevisionNumber",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "RevisionNumber",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SalesOrderDetailID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SalesOrderDetailID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "OrderQty",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "OrderQty",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSynapseAnalyticsTable6",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsTable7",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-24T16:55:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFLow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Pipeline",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Newdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceOrderDetail": {},
									"sourceOrderHeader": {},
									"sinkDestination": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "storageADF",
									"type": "LinkedServiceReference"
								},
								"folderPath": "resource-container"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-25T04:24:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Newdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/triggertumbling')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pipeline3",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2025-07-28T10:42:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline3')]"
			]
		}
	]
}